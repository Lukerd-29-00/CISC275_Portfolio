{"version":3,"sources":["tic-tac-toe/hooks/useRows.ts","tic-tac-toe/components/TicTacToeBoard.tsx","tic-tac-toe/inactive/Inactive.tsx","tic-tac-toe/components/TicTacToeDashboard.tsx","info/changelog/inactive/inactive.tsx","info/changelog/Changelog.tsx","info/Todo/inactive/Inactive.tsx","info/Todo/Todo.tsx","Checkers/inactive/Inactive.tsx","Checkers/components/CheckersSquare.tsx","Checkers/components/CheckersBoard.tsx","Checkers/hooks/UseSquares.ts","Checkers/components/CheckersDashboard.tsx","App.tsx","index.tsx"],"names":["emptySquares","output","Array","i","length","row","j","isValidTurn","turn","TicTacToeBoard","props","useState","rows","updateRows","column","newRows","newRow","useRows","updateSquare","clearBoard","changeTurn","winner","setWinner","newWinner","board","victory_triplets","tie","lastTurn","ctr","getSquare","win","counter","X","O","empty","cmp","square","Winner","className","map","array","value","onClick","disabled","Math","floor","Error","Inactive","enabler","href","TicTacToeDashboard","active","disable","enable","func","Changelog","weeks","week_one","week_two","push","week","Todo","CheckersSquare","moving","moves","highlighted","color","move","destination","position","col","movePiece","setFirstMove","deletes","selectSquare","selectPiece","piece","redsTurn","child","getAdjacentSquares","up","down","upanddown","concat","sqs","undefined","king","pos","getAdjacentEmptySquares","filter","sq","CheckersBoard","pieceColor","squares","updateSquares","start","newSquares","targetSquares","highlight","useSquares","setSquaresHighlighted","selectedSquare","setRedsTurn","isFirstMove","setIsFirstMove","enemies","enemy","allSquares","rowIndex","firstMove","CheckersDashboard","App","viewing","updateViewing","addViewing","component","stopViewing","indexOf","slice","a","Cookies","set","includes","id","Button","get","alert","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c03b803b.chunk.js","sourcesContent":["import { useState } from \"react\";\r\n\r\nfunction emptySquares(){\r\n    const output = Array<Array<\"X\" | \"O\" | null>>(3);\r\n    for(let i = 0;i < output.length;i++){\r\n        let row = new Array<null>(3);\r\n        for(let j = 0;j < row.length;j++){\r\n            row[j] = null;\r\n        }\r\n    output[i] = row;\r\n    }\r\n    return output;\r\n}\r\n\r\nexport function useRows(): [Array<Array<\"X\" | \"O\" | null>>,(column: number, row: number, turn: \"X\" | \"O\") => undefined, () => void]{\r\n    const [rows, updateRows] = useState(emptySquares);\r\n    const updateSquare = (column: number,row: number,turn: \"X\" | \"O\") => {\r\n        let newRows = new Array<Array<\"X\" | \"O\" | null>>(3);\r\n        let newRow = new Array<\"X\" | \"O\" | null>(3);\r\n        for(let i = 0;i < newRow.length;i++){\r\n            if(i !== column){\r\n                newRow[i] = rows[row][i]\r\n            }\r\n            else{\r\n                newRow[i] = turn;\r\n            }\r\n        }\r\n        for(let i = 0;i < newRows.length;i++){\r\n            if(i !== row){\r\n                newRows[i] = rows[i]\r\n            }\r\n            else{\r\n                newRows[i] = newRow;\r\n            }\r\n        }\r\n        updateRows(newRows);\r\n        return undefined;\r\n        \r\n    }\r\n    const emptyAll = () => {\r\n        updateRows(emptySquares());\r\n    }\r\n    return [rows, updateSquare, emptyAll];\r\n\r\n}","import { useState } from \"react\";\r\nimport { useRows } from \"../hooks/useRows\";\r\n\r\ninterface empty {\r\n\r\n}\r\n\r\nfunction isValidTurn(turn: string):turn is \"X\" | \"O\"{\r\n    return turn === \"X\" || turn === \"O\";\r\n}\r\n\r\nexport function TicTacToeBoard(props: empty): JSX.Element{\r\n    const [rows, updateSquare, clearBoard] = useRows();\r\n    const [turn, changeTurn] = useState(\"X\");\r\n    const [winner, setWinner] = useState(\"nobody\");\r\n    let newWinner = null;\r\n    if(isValidTurn(turn)){\r\n        newWinner = Winner(rows,turn);\r\n    }\r\n    if(newWinner !== null && winner === \"nobody\"){\r\n        setWinner(newWinner);\r\n    }\r\n\r\n    return(\r\n        <>\r\n        <div className=\"game-info\">\r\n            {winner === \"nobody\" ? <p>{turn}'s turn</p> : winner === \"tie\" ? <p>Tie!</p> : <p>Winner: {winner}</p>}\r\n        </div>\r\n        <div className=\"game-board\">\r\n            {rows.map((row: Array<\"X\" | \"O\" | null>,i: number, array: Array<Array<\"X\" | \"O\" | null>>) => {\r\n                return <div key={i} className=\"board-row\">\r\n                    {array[i].map((value: \"X\" | \"O\" | null,j: number) => {\r\n                        if(isValidTurn(turn)){\r\n                            return <button key={Math.floor(i/3) + j % 3} onClick={() => {updateSquare(j,i,turn); changeTurn(turn === \"X\" ? \"O\" : \"X\")}} disabled={winner !== \"nobody\" || rows[i][j] != null}>{value}</button>\r\n                        }\r\n                        else{\r\n                            throw Error(`Invalid player ${turn}`);\r\n                        }\r\n                    })}\r\n                </div>\r\n            })}\r\n            <button onClick={() => {setWinner(\"nobody\"); clearBoard(); changeTurn(\"X\");}}>reset</button>\r\n        </div>\r\n        </>\r\n\r\n\r\n    )\r\n}\r\n\r\nfunction getSquare(board: Array<Array<\"X\" | \"O\" | null>>,i: number): \"X\" | \"O\" | null{\r\n    return board[Math.floor(i/3)][i % 3]\r\n}\r\n\r\ninterface Counter {\r\n    X: number,\r\n    O: number,\r\n    empty: number\r\n}\r\n\r\nfunction Winner(board: Array<Array<\"X\" | \"O\" | null>>,turn: \"X\" | \"O\"): \"X\" | \"O\" | \"tie\" | null{\r\n    const victory_triplets = [\r\n        [0,1,2],\r\n        [0,3,6],\r\n        [0,4,8],\r\n        [1,4,7],\r\n        [2,5,8],\r\n        [3,4,5],\r\n        [6,4,2],\r\n        [6,7,8]\r\n    ]\r\n    let tie = true;\r\n    let lastTurn = true;\r\n    let ctr = 0;\r\n    for(let i = 0;i < 9;i++){\r\n        if(getSquare(board,i) === null){\r\n            ctr++;\r\n        }\r\n    }\r\n    if(ctr >= 2){\r\n        lastTurn = false;\r\n    }\r\n    for(let win = 0;win < victory_triplets.length;win++){\r\n        let counter: Counter = {X: 0,O: 0,empty: 0}\r\n        let cmp = getSquare(board,victory_triplets[win][0])\r\n        for(let i = 0;i < 3;i++){\r\n            let square = getSquare(board,victory_triplets[win][i]);\r\n            if(square === null){\r\n                counter.empty++;\r\n            }\r\n            else if(square === \"X\"){\r\n                counter.X++;\r\n            }\r\n            else{\r\n                counter.O++;\r\n            }\r\n\r\n        }\r\n        if(counter.X === 3 || counter.O === 3){\r\n            return cmp;\r\n        }\r\n        if(lastTurn && turn === \"X\"){\r\n            counter.O--;\r\n        }\r\n        else if(lastTurn && turn === \"O\"){\r\n            counter.X--;\r\n        }\r\n        if((counter.X + counter.empty === 3) || (counter.O + counter.empty === 3)){\r\n            tie = false;\r\n        }\r\n    }\r\n    return tie ? \"tie\" : null;\r\n}","import { inactiveProps } from \"../../App\"\r\n\r\nexport function Inactive(props: inactiveProps){\r\n    return (\r\n    <div>\r\n        <h2><button className=\"link\" onClick={props.enabler}>Tic-Tac-Toe</button></h2>\r\n        <p>This is based on this <a href=\"https://reactjs.org/tutorial/tutorial.html\">React tutorial</a>, but it uses hooks and function components instead of the class-based approach. The stying is a slight modification of the css presented in that tutorial.</p>\r\n    </div>\r\n    )\r\n}","import { TicTacToeBoard } from \"./TicTacToeBoard\";\r\nimport { Inactive } from \"../inactive/Inactive\";\r\nimport { DashboardProps } from \"../../App\";\r\n\r\nexport function TicTacToeDashboard(props: DashboardProps){\r\n    return props.active ? (\r\n        <section>\r\n            <div>\r\n                <TicTacToeBoard />\r\n            </div>\r\n            <footer>\r\n                <button className=\"small-link\" onClick={props.disable}>description</button>\r\n            </footer>\r\n        </section>\r\n\r\n    ) : (\r\n        <Inactive enabler = {props.enable}/>\r\n    )\r\n}","interface func {\r\n    func: () => void\r\n}\r\nexport function Inactive(props: func){\r\n    return (\r\n        <button className=\"link\" onClick={props.func}>Changelog</button>\r\n    )\r\n\r\n}","import { Inactive } from \"./inactive/inactive\";\r\n\r\ninterface ChangelogProps {\r\n    disable: () => void,\r\n    enable: () => void,\r\n    active: boolean,\r\n}\r\n\r\nexport function Changelog(props: ChangelogProps){\r\n    if(props.active){\r\n        let weeks = new Array<Array<string>>();\r\n        let week_one = new Array<string>();\r\n        let week_two = new Array<string>();\r\n        weeks.push(week_one);\r\n        weeks.push(week_two)\r\n        week_one.push(\"Created this page for the portfolio and added my name, email, and the repository this page is being hosted from to it.\");\r\n        week_one.push(\"Created the tic-tac-toe game and added it to this page (see the game above for the description.)\");\r\n        week_one.push(\"Added the changelog and the todo list to this page.\")\r\n        week_one.push(\"Added a button to hide all open apps to this page.\")\r\n        week_one.push(\"Added interface to show or hide react components to view different projects.\")\r\n        week_one.push(\"Updated tic-tac-toe game to tie when the game can no longer be won.\")\r\n\r\n        week_two.push(\"Added checkers board that the pieces can move in (The project is still a work in progress.\")\r\n        week_two.push(\"Added the cookie module with a button to add a cookie to the browser and a button to detect if the cookie has been issued.\")\r\n\r\n    \r\n        return <section>\r\n            <div>\r\n                {weeks.map((week: Array<string>, i: number) => {\r\n                    return <div>\r\n                        <h1 className=\"large-bold\">Week {i+1}</h1>\r\n                        <ul>\r\n                            {week.map((value: string, j: number) => {\r\n                            return <li key = {j}><p>{value}</p></li>\r\n                            })}\r\n                        </ul>\r\n                    </div>\r\n                })}\r\n                </div>\r\n                <footer>\r\n                    <button className=\"small-link\" onClick={props.disable}>collapse</button>\r\n                </footer>\r\n        </section>\r\n    }\r\n    else{\r\n        return (\r\n            <div>\r\n                <Inactive func={props.enable}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}","import { inactiveProps } from \"../../../App\";\r\n\r\nexport function Inactive(props: inactiveProps){\r\n    return ( \r\n        <div>\r\n            <button className=\"link\" onClick={props.enabler}>Todo</button>\r\n        </div>\r\n    );\r\n}","\r\nimport { Inactive } from \"./inactive/Inactive\";\r\n\r\ninterface TodoProps{\r\n    disable: () => void,\r\n    enable: () => void,\r\n    active: boolean,\r\n}\r\n\r\nexport function Todo(props: TodoProps): JSX.Element{\r\n    if(props.active){\r\n        let weeks = new Array<Array<string>>();\r\n        let week_one = new Array<string>();\r\n        let week_two = new Array<string>();\r\n        weeks.push(week_one);\r\n        weeks.push(week_two)\r\n        week_one.push(\"Add a singleplayer mode with a basic AI to tic-tac-toe.\");\r\n        week_one.push(\"Add a game of checkers to the portfolio.\");\r\n        week_one.push(\"Add a cookie generator that puts a non-functional cookie in your browser.\")\r\n\r\n        week_two.push(\"Finish Checkers game\")\r\n        week_two.push(\"Create a bootstrap-styled page\")\r\n        \r\n    \r\n        return <section>\r\n            <div>\r\n                {weeks.map((week: Array<string>, i: number) => {\r\n                    return <div>\r\n                        <h1 className=\"large-bold\">Week {i+2}</h1>\r\n                        <ul>\r\n                            {week.map((value: string, j: number) => {\r\n                            return <li key = {j}><p>{value}</p></li>\r\n                            })}\r\n                        </ul>\r\n                    </div>\r\n                })}\r\n                </div>\r\n                <footer>\r\n                    <button className=\"small-link\" onClick={props.disable}>collapse</button>\r\n                </footer>\r\n        </section>\r\n    }\r\n    else{\r\n        return (\r\n            <div>\r\n                <Inactive enabler={props.enable}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}","import { inactiveProps } from \"../../App\"\r\n\r\nexport function Inactive(props: inactiveProps){\r\n    return (\r\n    <div>\r\n        <h2><button className=\"link\" onClick={props.enabler}>Checkers (WIP)</button></h2>\r\n        <p>This is a work-in-progress checkers game. It is not directly based on any tutorial. Currently, the pieces can only move to an empty, diagonally-adjacent square. Click on a piece to see where it can move, and click on a highlighted square to move. The game does not detect when the game is won, and there are occasional crashes caused by a move that could delete one of two possible pieces.</p>\r\n    </div>\r\n    )\r\n}","import {Piece, Square, Move} from \"./CheckersBoard\"\r\nexport interface SquareProps {\r\n    square: Square\r\n    redsTurn: boolean\r\n    moves: Array<Move>\r\n    selectSquare: (square: Square) => void\r\n    movePiece: (move: Move) => void\r\n    firstMove: boolean\r\n    setFirstMove: (firstMove: boolean) => void\r\n    selectPiece: (piece: Piece | null) => void\r\n    child: JSX.Element\r\n}\r\n\r\nexport function CheckersSquare(props: SquareProps){\r\n    const moving: boolean = props.moves.length > 0\r\n    const onClick = () => {\r\n        if(moving){\r\n            for(const move of props.moves){\r\n                if(move.destination.position.row === props.square.position.row && move.destination.position.col === props.square.position.col){\r\n                    props.movePiece(move);\r\n                    props.setFirstMove(false);\r\n                    if(move.deletes !== null){\r\n                        props.selectSquare(move.destination);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            props.selectSquare(props.square);\r\n            props.selectPiece(props.square.piece)\r\n        }\r\n    }\r\n    return (\r\n            <button className={props.square.highlighted ? \"square highlighted\" : props.square.color === \"black\" ? \"square dark\" : \"square\"} onClick={onClick} disabled={moving ? !props.square.highlighted : !(props.square.piece !== null && ((props.redsTurn && props.square.piece.color === \"red\") || (!props.redsTurn && props.square.piece.color === \"black\")))}>{props.child}</button>\r\n    )\r\n\r\n}","import {useState} from 'react'\r\nimport { getPositionOfLineAndCharacter } from 'typescript';\r\nimport { useSquares } from '../hooks/UseSquares'\r\nimport { CheckersSquare, SquareProps } from './CheckersSquare';\r\nexport interface Position {\r\n    row: number,\r\n    col: number\r\n}\r\n\r\n//red pieces are on the bottom, black are on the top. Top row is zero, bottom row is 7.\r\nexport interface Piece {\r\n    color: \"black\" | \"red\"\r\n    king: boolean\r\n}\r\n\r\nexport interface Square{\r\n    piece: Piece | null\r\n    color: \"white\" | \"black\"\r\n    highlighted: boolean,\r\n    position: Position\r\n}\r\n\r\nexport interface Move {\r\n    deletes: Square | null\r\n    destination: Square\r\n}\r\n\r\ninterface NoProps {\r\n\r\n}\r\n\r\n\r\nfunction getAdjacentSquares(square: Square, board: Array<Array<Square>>, piece?: Piece): Array<Square>{\r\n    const up = [{row: square.position.row-1,col:square.position.col-1},{row:square.position.row-1,col:square.position.col+1}];\r\n    const down = [{row: square.position.row+1,col:square.position.col-1},{row:square.position.row+1,col: square.position.col+1}]\r\n    const upanddown = up.concat(down)\r\n    let sqs = new Array<Position>();\r\n    if(piece === undefined && square.piece === null){\r\n        throw Error(\"No piece to get targets of!\")\r\n    }\r\n    else if(piece === undefined){\r\n        piece = (square.piece as Piece);\r\n    }\r\n    let output = new Array<Square>();\r\n    if(piece.king){\r\n        sqs = upanddown\r\n    }\r\n    else if(piece.color === \"red\"){\r\n        sqs = up\r\n    }\r\n    else{\r\n        sqs = down\r\n    }\r\n    for(const pos of sqs){\r\n        if(pos.row >= 0 && pos.row <= 7 && pos.col >= 0 && pos.col <= 7){\r\n            output.push(board[pos.row][pos.col]);\r\n        }\r\n    }\r\n    return output;\r\n}\r\n\r\nfunction getAdjacentEnemyPieces(square: Square | null,board: Array<Array<Square>>,piece?: Piece): Array<Square>{\r\n    if(square === null || square.piece === null){\r\n        return [];\r\n    }\r\n    return getAdjacentSquares(square,board,piece).filter((sq: Square) => {\r\n        return sq.piece !== null && sq.piece.color !== (square.piece as Piece).color\r\n    })\r\n}\r\n\r\nfunction getAdjacentEmptySquares(square: Square | null, board: Array<Array<Square>>,piece?: Piece): Array<Square>{\r\n    if(square == null || square.piece === null){\r\n        return [];\r\n    }\r\n    return getAdjacentSquares(square,board,piece).filter((sq: Square) => {\r\n        return sq.piece === null;\r\n    })\r\n}\r\n\r\nexport function CheckersBoard(props: NoProps){\r\n    const [squares, movePiece, setSquaresHighlighted] = useSquares();\r\n    const [selectedSquare, selectSquare] = useState<Square | null>(null);\r\n    const [redsTurn, setRedsTurn] = useState(true);\r\n    const [isFirstMove, setIsFirstMove] = useState(true);\r\n    const [selectedPiece, selectPiece] = useState<Piece | null>(null)\r\n    let moves = new Array<Move>();\r\n    if(selectedSquare !== null){\r\n        //if this is the first move of the turn, allow moving into nearby empty spaces.\r\n        if(isFirstMove){\r\n            moves = moves.concat(getAdjacentEmptySquares(selectedSquare,squares).map((square :Square) => {\r\n                return {destination: square,deletes: null}\r\n            }))\r\n        }\r\n        //Add any squares that kill nearby enemies.\r\n        const enemies = getAdjacentEnemyPieces(selectedSquare,squares,(selectedSquare.piece as Piece));\r\n        for(const enemy of enemies){\r\n            moves = moves.concat(getAdjacentEmptySquares(enemy,squares,(selectedSquare.piece as Piece)).map((destination: Square) => {\r\n                return {destination: destination,deletes: enemy}\r\n            }))\r\n        }\r\n        //If no moves can be made, the other player gets their turn.\r\n        if(moves.length === 0){\r\n            setRedsTurn(!redsTurn);\r\n            setIsFirstMove(true);\r\n            selectSquare(null);\r\n            selectPiece(null);\r\n            let allSquares = new Array<Square>(64);\r\n            for(let i = 0;i < 64;i++){\r\n                allSquares[i] = squares[Math.floor(i/8)][i % 8]\r\n            }\r\n            setSquaresHighlighted(allSquares,false);\r\n        }\r\n        else{\r\n            for(const move of moves){\r\n                if(!squares[move.destination.position.row][move.destination.position.col].highlighted){\r\n                    \r\n                    setSquaresHighlighted([move.destination],true);\r\n                    \r\n                }\r\n            }\r\n        }\r\n    }\r\n        return (\r\n        <div className=\"container\">\r\n        {squares.map((row: Square[],rowIndex: number) => {\r\n            return (\r\n                    <div className=\"board-row\">\r\n                        {row.map((square: Square,col: number) => {\r\n                            let output: SquareProps = {\r\n                                square: squares[rowIndex][col],\r\n                                redsTurn: redsTurn,\r\n                                moves: moves,\r\n                                selectSquare: selectSquare,\r\n                                movePiece: (move: Move) => {movePiece(selectedSquare,move)},\r\n                                firstMove: isFirstMove,\r\n                                setFirstMove: setIsFirstMove,\r\n                                selectPiece: selectPiece,\r\n                                child: <></>    \r\n                            }\r\n    \r\n                            if(square.piece !== null && square.piece.color === \"black\"){\r\n                                output.child = <span className=\"dot\"/>\r\n                                return CheckersSquare(output);\r\n                            }\r\n                            else if(square.piece !== null && square.piece.color === \"red\"){\r\n                                output.child = <span className=\"dot red\"/>\r\n                                return CheckersSquare(output);\r\n                            }\r\n                            return CheckersSquare(output);\r\n    \r\n                        })\r\n                    }\r\n                </div>\r\n                )\r\n            })}\r\n            </div>\r\n        )\r\n    }\r\n\r\n","import {useState} from 'react'\r\nimport { moveEmitHelpers } from 'typescript';\r\nimport {Move, Piece, Square} from \"../components/CheckersBoard\"\r\n\r\nexport function useSquares(): [Array<Array<Square>>,(square: Square | null,move: Move) => void,(squares: Array<Square>,highlight: boolean) => void]{\r\n\r\n    const newBoard = () => {\r\n        let output = new Array<Array<Square>>(8);\r\n        \r\n        for(let row = 0;row < 8;row++){\r\n            let newRow = new Array<Square>(8);\r\n            for(let col = 0;col < 8;col++){\r\n                let color: \"black\" | \"white\" = row % 2 !== col % 2 ? \"black\" : \"white\"\r\n                let pieceColor: \"black\" | \"red\" = \"red\"\r\n                if(row < 3){\r\n                    pieceColor = \"black\";\r\n                    let piece = color === \"black\" ? {color: pieceColor, king: false} : null;\r\n                    newRow[col] = ({position: {row: row,col: col},piece: piece,color: color,highlighted: false});\r\n                }\r\n                else if(row > 4){\r\n                    let piece = color === \"black\" ? {color: pieceColor, king: false} : null;\r\n                    newRow[col] = ({position: {row: row,col: col},piece: piece,color: color,highlighted: false});\r\n                }\r\n                else{\r\n                    newRow[col] = ({position: {row: row,col: col},piece: null,color: color,highlighted: false});\r\n                }\r\n            }\r\n            output[row] = newRow;\r\n        }\r\n        \r\n        return output;\r\n    }\r\n    \r\n\r\n    const [squares, updateSquares] = useState(newBoard);\r\n\r\n\r\n    const movePiece = (start: Square | null, move: Move) => {\r\n        const newSquares = new Array<Array<Square>>().concat(squares);\r\n        if(move.destination.piece !== null){\r\n            throw Error(\"Tried to move to an occupied space!\")\r\n        }\r\n        else if(start === null){\r\n            return;\r\n        }\r\n        newSquares[move.destination.position.row][move.destination.position.col].piece = start.piece;\r\n        newSquares[start.position.row][start.position.col].piece = null;\r\n        if(move.deletes !== null){\r\n            newSquares[move.deletes.position.row][move.deletes.position.col].piece = null;\r\n        }\r\n        for(const row of newSquares){\r\n            for(const square of row){\r\n                square.highlighted = false;\r\n            }\r\n        }\r\n        updateSquares(newSquares);\r\n    }\r\n    \r\n    const setSquaresHighlighted = (targetSquares: Array<Square>,highlight: boolean) => {\r\n        const newSquares = new Array<Array<Square>>().concat(squares)\r\n        for(const square of targetSquares){\r\n            newSquares[square.position.row][square.position.col].highlighted = highlight;\r\n        }\r\n        updateSquares(newSquares);\r\n    }\r\n\r\n    return [squares, movePiece, setSquaresHighlighted]\r\n\r\n}","import { DashboardProps } from \"../../App\";\r\nimport { Inactive } from \"../inactive/Inactive\";\r\nimport { CheckersBoard } from \"./CheckersBoard\";\r\n\r\nexport function CheckersDashboard(props: DashboardProps){\r\n    if(props.active){\r\n        return (\r\n            <section>\r\n                <CheckersBoard/>\r\n                <footer>\r\n                    <button className=\"link\" onClick={props.disable}>description</button>\r\n                </footer>\r\n            </section>\r\n        )\r\n    }\r\n    else{\r\n        return <Inactive enabler={props.enable}/>\r\n    }\r\n}","import { useState } from 'react';\r\nimport './App.scss';\r\nimport {TicTacToeDashboard} from \"./tic-tac-toe/components/TicTacToeDashboard\";\r\nimport {Changelog} from \"./info/changelog/Changelog\";\r\nimport { Todo } from './info/Todo/Todo';\r\nimport Cookies from \"universal-cookie\";\r\nimport Button from \"react-bootstrap/Button\"\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport { CheckersDashboard } from './Checkers/components/CheckersDashboard';\r\n\r\nexport interface inactiveProps {\r\n  enabler: () => void\r\n}\r\n\r\nexport interface DashboardProps {\r\n  enable: () => void\r\n  disable: () => void\r\n  active: boolean\r\n}\r\n\r\nfunction App() {\r\n  const [viewing, updateViewing] = useState(() => {return new Array<(props: any) => JSX.Element>();});\r\n  function addViewing(component: (props: any) => JSX.Element): void{\r\n    updateViewing(viewing.concat([component]))\r\n  }\r\n\r\n  function stopViewing(component: (props: any) => JSX.Element): void{\r\n    const i = viewing.indexOf(component);\r\n    if(i !== -1){\r\n      updateViewing(viewing.slice(0,i).concat(viewing.slice(i+1,viewing.length)));\r\n    }\r\n  }\r\n\r\n  function viewNothing(): void{\r\n    updateViewing(new Array<(props: any) => JSX.Element>());\r\n  }\r\n\r\n  async function setCookie(): Promise<void>{\r\n    const cookies = new Cookies();\r\n    cookies.set(\"test\",\"this is a test\");\r\n  }\r\n\r\n  function viewCookie(): void{\r\n    const cookies = new Cookies();\r\n    if(cookies.get(\"test\")){\r\n      alert(\"You have a cookie!\");\r\n    }\r\n    else{\r\n      alert(\"You are cookieless!\");\r\n    }\r\n  }\r\n\r\n  return (\r\n  <>\r\n  <section>\r\n    <div>\r\n      Hi! my name is Lucas Driscoll (email <a href = \"mailto:lucasd@udel.edu\">lucasd@udel.edu</a>), and this is the first page of my CISC 275-010 portfolio! this page is hosted on github pages using <a href=\"https://github.com/Lukerd-29-00/Portfolio\">this repository</a>.\r\n    </div>\r\n    <hr/>\r\n    {<TicTacToeDashboard disable={() =>{stopViewing(TicTacToeDashboard)}} enable={() =>{addViewing(TicTacToeDashboard)}} active={viewing.includes(TicTacToeDashboard)}/>}\r\n    <hr/>\r\n    <div>\r\n    Click this button to get a cookie! (This was created using the example in the readme of the universal-cookie github repository.)\r\n    </div>\r\n    <div>\r\n      <button id=\"cookie\" onClick = {setCookie}/>\r\n    </div>\r\n    <br/>\r\n    <div>\r\n      <Button onClick={viewCookie}>see if cookie is present</Button>\r\n    </div>\r\n    <hr/>\r\n    <CheckersDashboard disable={() => {stopViewing(CheckersDashboard)}} enable={()=>{addViewing(CheckersDashboard)}} active={viewing.includes(CheckersDashboard)}/>\r\n    <hr/>\r\n    <footer>\r\n      <Changelog disable = {() => {stopViewing(Changelog)}} enable={() => {addViewing(Changelog)}} active={viewing.includes(Changelog)}/>\r\n      {viewing.includes(Changelog) || viewing.includes(Todo) ? <hr/> : <></>}\r\n      <Todo disable={() => {stopViewing(Todo)}} enable={() => {addViewing(Todo)}} active={viewing.includes(Todo)}/>\r\n      {viewing.includes(Todo) ? <hr/> : <></>}\r\n      <button className=\"link\" onClick={viewNothing}>Hide all</button>\r\n    </footer>\r\n  </section>\r\n  </>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n//reportWebVitals();\r\n"],"sourceRoot":""}