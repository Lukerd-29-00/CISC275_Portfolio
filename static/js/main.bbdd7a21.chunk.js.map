{"version":3,"sources":["tic-tac-toe/hooks/useRows.ts","tic-tac-toe/components/Board.tsx","tic-tac-toe/inactive/Inactive.tsx","tic-tac-toe/components/Dashboard.tsx","App.tsx","index.tsx"],"names":["emptySquares","output","Array","i","length","row","j","Board","props","useState","rows","updateRows","column","turn","newRows","newRow","useRows","updateSquare","changeTurn","winner","setWinner","newWinner","board","victory_triplets","win","won","cmp","getSquare","Winner","className","map","array","value","isValidTurn","onClick","disabled","Error","Math","floor","Inactive","func","href","Dashboard","active","disable","enable","App","viewing","updateViewing","component","indexOf","slice","concat","stopViewing","includes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bbdd7a21.chunk.js","sourcesContent":["import { useState } from \"react\";\r\n\r\nfunction emptySquares(){\r\n    const output = Array<Array<\"X\" | \"O\" | null>>(3);\r\n    for(let i = 0;i < output.length;i++){\r\n        let row = new Array<null>(3);\r\n        for(let j = 0;j < row.length;j++){\r\n            row[j] = null;\r\n        }\r\n    output[i] = row;\r\n    }\r\n    return output;\r\n}\r\n\r\nexport function useRows(): [Array<Array<\"X\" | \"O\" | null>>,(column: number, row: number, turn: \"X\" | \"O\") => undefined]{\r\n    const [rows, updateRows] = useState(emptySquares);\r\n    const updateSquare = (column: number,row: number,turn: \"X\" | \"O\") => {\r\n        if(rows[row][column] == null){\r\n            let newRows = new Array<Array<\"X\" | \"O\" | null>>(3);\r\n            let newRow = new Array<\"X\" | \"O\" | null>(3);\r\n            for(let i = 0;i < newRow.length;i++){\r\n                if(i != column){\r\n                    newRow[i] = rows[row][i]\r\n                }\r\n                else{\r\n                    newRow[i] = turn;\r\n                }\r\n            }\r\n            for(let i = 0;i < newRows.length;i++){\r\n                if(i != row){\r\n                    newRows[i] = rows[i]\r\n                }\r\n                else{\r\n                    newRows[i] = newRow;\r\n                }\r\n            }\r\n            updateRows(newRows);\r\n            return undefined;\r\n        }\r\n    }\r\n    return [rows, updateSquare];\r\n\r\n}","import { useState } from \"react\";\r\nimport { useRows } from \"../hooks/useRows\";\r\n\r\ninterface empty {\r\n\r\n}\r\n\r\nfunction isValidTurn(turn: string):turn is \"X\" | \"O\"{\r\n    return turn == \"X\" || turn == \"O\";\r\n}\r\n\r\nexport function Board(props: empty): JSX.Element{\r\n    const [rows, updateSquare] = useRows();\r\n    const [turn, changeTurn] = useState(\"X\");\r\n    const [winner, setWinner] = useState(\"nobody\");\r\n    const newWinner = Winner(rows);\r\n    if(newWinner != null && winner == \"nobody\"){\r\n        setWinner(newWinner);\r\n    }\r\n\r\n    return(\r\n        <>\r\n        <div className=\"game-info\">\r\n            {winner == \"nobody\" ? <p>{turn}'s turn</p> : <p>Winner: {winner}</p>}\r\n        </div>\r\n        <div className=\"game-board\">\r\n            {rows.map((row: Array<\"X\" | \"O\" | null>,i: number, array: Array<Array<\"X\" | \"O\" | null>>) => {\r\n                return <div className=\"board-row\">\r\n                    {array[i].map((value: \"X\" | \"O\" | null,j: number) => {\r\n                        if(isValidTurn(turn)){\r\n                            return <button className=\"square\" onClick={() => {updateSquare(j,i,turn); changeTurn(turn == \"X\" ? \"O\" : \"X\")}} disabled={winner != \"nobody\"}>{value}</button>\r\n                        }\r\n                        else{\r\n                            throw Error(`Invalid player ${turn}`);\r\n                        }\r\n                    })}\r\n                </div>\r\n            })}\r\n        </div>\r\n        </>\r\n\r\n\r\n    )\r\n}\r\n\r\nfunction getSquare(board: Array<Array<\"X\" | \"O\" | null>>,i: number): \"X\" | \"O\" | null{\r\n    return board[Math.floor(i/3)][i % 3]\r\n}\r\n\r\nfunction Winner(board: Array<Array<\"X\" | \"O\" | null>>): \"X\" | \"O\" | null{\r\n    const victory_triplets = [\r\n        [0,1,2],\r\n        [0,3,6],\r\n        [0,4,8],\r\n        [1,4,7],\r\n        [2,5,8],\r\n        [3,4,5],\r\n        [6,4,2],\r\n        [6,7,8]\r\n    ]\r\n\r\n    for(let win = 0;win < victory_triplets.length;win++){\r\n        let won = true;\r\n        let cmp = getSquare(board,victory_triplets[win][0])\r\n        if(cmp == null){\r\n            continue;\r\n        }\r\n        for(let i = 1;i < 3;i++){\r\n            if(getSquare(board,victory_triplets[win][i]) !== cmp){\r\n                won = false;\r\n            }\r\n        }\r\n        if(won){\r\n            return cmp;\r\n        }\r\n    }\r\n    return null;\r\n}","interface func{\r\n    func: () => void\r\n}\r\n\r\nexport function Inactive(props: func){\r\n    return (\r\n    <div>\r\n        <h2><button className=\"link\" onClick={props.func}>Tic-Tac-Toe</button></h2>\r\n        <hr/>\r\n        <p>This is based on this <a href=\"https://reactjs.org/tutorial/tutorial.html\">React tutorial</a>, but it uses hooks and function components instead of the class-based approach. The stying is copied directly from the tutorial.</p>\r\n    </div>\r\n    )\r\n}","import { isPropertySignature } from \"typescript\";\r\nimport { Board } from \"./Board\";\r\nimport { Inactive } from \"../inactive/Inactive\";\r\n\r\ninterface dashboardProps{\r\n    disable: () => void,\r\n    enable: () => void,\r\n    active: boolean,\r\n}\r\n\r\nexport function Dashboard(props: dashboardProps){\r\n    return props.active ? (\r\n        <section>\r\n            <div>\r\n                <Board />\r\n            </div>\r\n            <footer>\r\n                <button className=\"small-link\" onClick={props.disable}>description</button>\r\n            </footer>\r\n        </section>\r\n\r\n    ) : (\r\n        <Inactive func = {props.enable}/>\r\n    )\r\n}","import { useState } from 'react';\r\nimport './App.css';\r\nimport {Dashboard} from \"./tic-tac-toe/components/Dashboard\";\r\n\r\n\r\nfunction App() {\r\n  const [viewing, updateViewing] = useState(() => {return new Array<(props: any) => JSX.Element>();});\r\n  function addViewing(component: (props: any) => JSX.Element): void{\r\n    updateViewing(viewing.concat([component]))\r\n  }\r\n\r\n  function stopViewing(component: (props: any) => JSX.Element): void{\r\n    const i = viewing.indexOf(component);\r\n    if(i !== -1){\r\n      updateViewing(viewing.slice(0,i).concat(viewing.slice(i+1,viewing.length)));\r\n    }\r\n  }\r\n\r\n  function viewNothing(): void{\r\n    updateViewing(new Array<(props: any) => JSX.Element>());\r\n  }\r\n\r\n  return (\r\n  <>\r\n  <section>\r\n    <div>\r\n      Hi! my name is Lucas Driscoll, and this is the first page of my CISC 275-010 portfolio! this page is hosted on github pages using <a href=\"https://github.com/Lukerd-29-00/Portfolio\">this repository</a>.\r\n    </div>\r\n    <hr/>\r\n    {<Dashboard disable={() =>{stopViewing(Dashboard)}} enable={() =>{addViewing(Dashboard)}} active={viewing.includes(Dashboard)}/>}\r\n    <hr/>\r\n    <footer>\r\n      <button className=\"link\" onClick={viewNothing}>Hide all projects</button>\r\n    </footer>\r\n  </section>\r\n  </>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n//reportWebVitals();\r\n"],"sourceRoot":""}